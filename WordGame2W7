var cw = 500;
var ch = 500;

var columns = [];

var columnNum = 7;

var balls = [];

var ballY = 0;

var letters = [];

var a = 0;

var b = 0;

var c = 0;

var index = 0;

var doubleRubble = [];

var myst = 0;

var checker = [];

var dictionary = ["abc", "aaa", "cab", "qqq"]

var checkVal = 0;



function setup() {
  createCanvas(cw, ch);
  letters = ["a", "b", "c", "q"];
  
  for (i = 0; i < columnNum; i++) {
  columns.push(new Column(i+1));
  columns[i].rubble = 0;
  }
  
}

function draw() {
  background(255, 0, 0);
  
  for (i = 0; i < columnNum; i++){
  columns[i].run();
  columns[i].RubbleCheck();
  columns[i].deadRun();
  
  if (frameCount % 240 === 1) {
    columns[i].AddNewTile();
  }
  }
  
  CleanUpTiles();
  
}

function Ball(xPos) {
  this.x = xPos;
  this.y = ballY;
  this.speed = .5;
  this.state = 0;
  this.letter = letters[index];
  this.checkState = 0;
  
  this.fall = function(rubble){
  this.y += this.speed;

    if (this.y > ch - 25 - rubble && this.state === 0) {
    this.speed = 0;
    this.state = .5;
}
    }
    
  this.display = function(){
   if (this.state === 0) {
    index = floor(random(letters.length));
    
    if (this.checkState === 0) {
    fill(255);}
    
    if (this.checkState === 1) {
    fill(255, 200, 200);}
    
    ellipse(this.x, this.y, 50, 50);
    
    fill(0);
    
    text(this.letter, this.x, this.y);
    
  } else if (this.state == 1) {
    index = floor(random(letters.length));
    
    fill(125);
    
    ellipse(this.x, this.y, 50, 50);
  }
  }
  
  this.deadDisplay = function(){
    if (this.state == 1) {
    index = floor(random(letters.length));
    fill(125);
    ellipse(this.x, this.y, 50, 50);
  }
  }
}

function Column(pos) {
  this.xPos = pos * (cw/(columnNum+2));
  this.rubble;
  this.tiles = [];
  this.deadTiles = [];

}

Column.prototype.AddNewTile = function() {
  this.tiles.push(new Ball(this.xPos));
};

Column.prototype.run = function() {
  for (var i = 0; i < this.tiles.length; i++) {
    this.tiles[i].fall(this.rubble);
    this.tiles[i].display();
  }
};

Column.prototype.deadRun = function() {
  for (var i = 0; i < this.deadTiles.length; i++) {
    this.deadTiles[i].display();
  }
};

Column.prototype.RubbleCheck = function() {
for (var i = 0; i < this.tiles.length; i++) {
  if (this.tiles[i].state == 1) {
  append(this.deadTiles, this.tiles[0]);
  this.tiles.splice(0, 1);
  }
}
  this.rubble = this.deadTiles.length * 50;
};

function runCheck(word){
  if (dictionary.indexOf(word) >= 0 && checker.length >= 3) {
    return true;
    } else {
      return false;
    }
  }

function CleanUpTiles() {
  if (checkVal == 1) {
    if (checker.length > 5) {
      for (var k = 0; k < columnNum; k++) {
        columns[k].deadTiles.length = 0;
      }
    }
    if (checker.length > 4) {
    for (var l = 0; l < columnNum; l++) {
      columns[k].deadTiles.splice(columns[k].deadTiles.length - 1, 0);
    }
    }
    if (checker.length > 3) {
    for (var m = 0; m < columnNum; m++) {
      for(var n = 0; n < columns[m].tiles.length; j++){
      columns[m].tiles.splice(0, 1);
    }
    }
    }
    
    if (checker.length == 3) {
  for (var i = 0; i < columnNum; i++) {
    for(var j = 0; j < columns[i].tiles.length; j++){
     if (columns[i].tiles[j].checkState === 2) {
       columns[i].tiles.splice(0, 1);
     }
    }
    }
    }
}
}

function mousePressed() {
  for (var i = 0; i < columnNum; i++) {
    for(var j = 0; j < columns[i].tiles.length; j++) {
    if (dist(mouseX, mouseY, columns[i].tiles[j].x, columns[i].tiles[j].y) <= 25) 
    {
     if (columns[i].tiles[j].checkState === 0) {
       columns[i].tiles[j].checkState = 1;
       checker.push(columns[i].tiles[j].letter);
     }

    if (columns[i].tiles[j].checkState == 2) {
      print("this");
      if (runCheck(join(checker, '')) === true) {
        print("true");
        for (var k = 0; k < checker.length; k++) {checker[k].checkState = 2;}
        checkVal = 1
      } else if (runCheck(join(checker, '')) === false){
          print("false");
          for (var l = 0; l < checker.length; l++) {
            checker[l].checkState = 0;
            checker.length = 0;
          }
          checkVal = 0;
        }
    
      }
     }
    }
  }
}

function mouseReleased() {
    for (var i = 0; i < columnNum; i++) {
    for(var j = 0; j < columns[i].tiles.length; j++){
      if (columns[i].tiles[j].checkState == 1) {
        columns[i].tiles[j].checkState == 2;
      }
}
}
}

